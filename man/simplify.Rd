% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simplify.R
\name{simplify}
\alias{simplify}
\title{Simplify}
\usage{
simplify(P, topo, G.unobs, G, G.obs)
}
\arguments{
\item{P}{probability object created with \link{probability()}. The probabilistic expression that will be simplified.}

\item{topo}{igraph list object created with \code{igraph::topological.sort} and \code{igraph::get.vertex.attribute}. The topological ordering of the vertices in graph G.}

\item{G.unobs}{object created with \link{unobserved.graph(G)}. Separate graph that turns bidirected edges into explicit nodes for unobserved confounders.}

\item{G}{object created with \code{igraph::graph.formula()}. Main graph G. Includes bidirected edges.}

\item{G.obs}{object created with \link{observed.graph(G)}. Separate graph that does not contain bidirected edges (only contains the directed edges with observed nodes).}
}
\value{
\code{simplify()} will return the simplified atomic expression in a list structure. For example (from example below):
\preformatted{
 $var: character(0)

 $cond: character(0)

 $sumset: [1] "z"

 $do: character(0)

 $product: [1] TRUE

 $fraction: [1] FALSE

 $sum: [1] FALSE

 $children: list()

 $den: list()

 $num: list()

 $domain: [1] 0

 $weight: [1] 0

 $attr(,"class"): [1] "probability"}

This long list structure can be converted into a string formatted in LaTeX syntax by the \code{get.expression} function. For example:

\preformatted{string_expression <- simplify(P, topo, G.unobs, G, G.obs)
get.expression(string_expression)

The resulting string should look like (from example below): "\\sum_{w}P(y|w,x)P(w)"}
}
\description{
This function algebraically simplifies probabilistic expressions given by the ID algorithm from \link{causal.effect}. It always attempts to perform maximal simplification, meaning that as many variables of the set are removed as possible. If the simplification in terms of the entire set cannot be completed, the intermediate result with as many variables simplified as possible should be returned.
}
\details{
Run \link{causal.effect} with the graph information first, then use the output of \link{causal.effect} as the \code{P} in \link{parse.expression}. Use the output from \link{parse.expression} as the \code{P} in \code{simplify}.

For further information, see Tikka & Karvanen (2017) "Simplifying Probabilistic Expressions in Causal Inference" Algorithm 1.
}
\examples{
\dontrun{
# defining graph information for G_1 using igraph
G_1 <- graph.formula(x -+ y, z -+ x, z -+ y , x -+ z, z -+ x, simplify = FALSE)
G_1 <- set.edge.attribute(graph = G_1, name = "description", index = c(4,5), value = "U")

# defining observed nodes of graph G_1 using igraph
G_1.obs <- observed.graph(G_1)

# defining unobserved nodes of graph G_1 using igraph
G_1.unobs <- unobserved.graph(G_1)

# defining topological sort of graph G_1 using igraph
topo_1 <- igraph::topological.sort(G_1.obs)
topo_1 <- igraph::get.vertex.attribute(G_1, "name")[topo_1]

# run causal.effect. simp = TRUE vs. simp = FALSE matters â€” as a simplification
# procedure is applied to the resulting probability object if simp = TRUE.
# d-separation and the rules of do-calculus are applied repeatedly to simplify
# the expression. The procedure is NOT applied if simp = FALSE.
causal.effect("y", "x", G = G_1, expr = FALSE, simp = TRUE)

# causal.effect generates a probability structure, which can then be applied to be the
# input of the function parse.expression.
parse.expression(causal_effect_output, topo_1, G_1.unobs, G_1, G_1.obs)

# parse.expression generates a list structure, which can then be applied to be the
# input of the simplify function.
# call simplify function, which will print out the simplified list structure
simplify(parse_expression_output, topo_1, G_1.unobs, G_1, G_1.obs)
}

}
\references{
Tikka, S., & Karvanen, J. (2017). Simplifying probabilistic expressions in causal inference. Journal of Machine Learning Research, 18(36), 1-30.
}
\seealso{
\code{\link{causal.effect}}, \code{\link{parse.expression}}, \code{\link{get.expression}}, \code{\link{probability}}
}
\author{
Haley Hummel,
Psychology PhD student at Oregon State University
}
\concept{causal inference}
\concept{graph theory}
\concept{probabilistic expressions}
\keyword{manip}
\keyword{math}
\keyword{models}
\keyword{utilities}
