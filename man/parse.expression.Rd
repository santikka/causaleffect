% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse.expression.R
\name{parse.expression}
\alias{parse.expression}
\title{Parse.expression}
\usage{
parse.expression(P, topo, G.unobs, G, G.obs)
}
\arguments{
\item{P}{probability object. The identified probabilistic expression taken from the output of \code{`causal.effect`}. Typically includes components such as numerator (\code{num}), denominator (\code{den}), product (\code{product}), summation set (\code{sumset}), and a fraction indicator (\code{fraction}).}

\item{topo}{igraph list object created with \code{igraph::topological.sort} and \code{igraph::get.vertex.attribute}. The topological ordering of the vertices in graph G.}

\item{G.unobs}{object created with \link{unobserved.graph(G)}. Separate graph that turns bidirected edges into explicit nodes for unobserved confounders.}

\item{G}{object created with \code{igraph::graph.formula()}. Main graph G. Includes bidirected edges.}

\item{G.obs}{object created with \link{observed.graph(G)}. Separate graph that does not contain bidirected edges (only contains the directed edges with observed nodes).}
}
\value{
A parsed probability object, potentially with adjusted summation sets and children, or \code{NULL} if the expression can be fully simplified away. This output can be used as the \code{P} for \link{simplify}.
}
\description{
The \code{`parse.expression`} function takes a probabilistic expression and processes it based on the topological order, unobserved and observed graphs, and the underlying graph structure to simplify or modify the expression.
}
\details{
The function recursively processes the input probability object (\code{P}) by applying rules based on the topological order and the graph structures. The function handles fractions, products, and summation sets, simplifying the expression where possible.

If the expression involves a fraction, the function attempts to cancel out terms and simplify both the numerator and the denominator. It also handles product terms by recursively parsing the children of the product and adjusting the summation sets accordingly.

The function ultimately returns a simplified expression or \code{NULL} if the expression reduces entirely.

#' @references Tikka, S., & Karvanen, J. (2017). Simplifying probabilistic expressions in causal inference. Journal of Machine Learning Research, 18(36), 1-30.
}
\examples{
\dontrun{

# defining graph information for G_1 using igraph
G_1 <- graph.formula(x -+ y, z -+ x, z -+ y , x -+ z, z -+ x, simplify = FALSE)
G_1 <- set.edge.attribute(graph = G_1, name = "description", index = c(4,5), value = "U")

# defining observed nodes of graph G_1 using igraph
G_1.obs <- observed.graph(G_1)

# defining unobserved nodes of graph G_1 using igraph
G_1.unobs <- unobserved.graph(G_1)

# defining topological sort of graph G_1 using igraph
topo_1 <- igraph::topological.sort(G_1.obs)
topo_1 <- igraph::get.vertex.attribute(G_1, "name")[topo_1]

# run causal.effect. simp = TRUE vs. simp = FALSE matters — as a simplification
# procedure is applied to the resulting probability object if simp = TRUE.
# d-separation and the rules of do-calculus are applied repeatedly to simplify
# the expression. The procedure is NOT applied if simp = FALSE.
# For this example, the outputs for simp = TRUE vs. simp = FALSE are the same.

causal.effect("y", "x", G = G_1, expr = FALSE, simp = TRUE)

# causal.effect generates a probability structure, which can then be applied to be the
# input of the function parse.expression.
# the initial probabilistic expression should be: ∑z P(y|z,x)P(z)
# the simplified expression should look like: ∑z P(y|z,x)P(z)
# The expr = FALSE is key to NOT printing a string (e.g. in the above 2 lines) to generate a longer output.
P_1 <- probability(
  sumset = c("z"),
  product = TRUE,
  fraction = FALSE,
  sum = FALSE,
  children = list(
    probability(var = "y", cond = c("z", "x")),
    probability(var = "z", cond = character(0))
  ),
  den = list(),
  num = list(),
  domain = 0,
  weight = 0
)

# now must define expected output from parse.expression
expected_output_1 <- probability(
  sumset = "z",
  product = TRUE,
  fraction = FALSE,
  sum = FALSE,
  children = list(
    probability(var = "y", cond = c("z", "x")),
    probability(var = "z", cond = character(0))
  ),
  den = list(),
  num = list(),
  domain = 0,
  weight = 0
)

parse.expression(P_1, topo_1, G_1.unobs, G_1, G_1.obs), expected_output_1)

}

}
\author{
Haley Hummel,
Psychology PhD student at Oregon State University
}
